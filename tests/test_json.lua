__definitions = function() end
JSON.parse = require('lib_jsonparse')

expect(JSON.stringify({{a = 5}, {b = 6}}), '[{"a":5},{"b":6}]')
expect(JSON.parse('5'), 5)
expect(JSON.parse('-17'), -17)
expect(JSON.parse('true'), true)
expect(JSON.parse('false'), false)
expect(JSON.parse('null'), nil)
expect(JSON.parse('[ 1, 1 ]'), { 1, 1 })
expect(JSON.parse('[ 1 1 ]'), { 1, 1 })
expect(JSON.parse('[ true, true ]'), { true, true })
expect(JSON.parse('[, true, true ]'), { true, true })
expect(JSON.parse('[,,,, 1, 2,, 3 ]'), { 1, 2, 3 })
expect(JSON.parse('"value"'), 'value')
expect(JSON.parse('"val\nue"'), 'val\nue')
expect(JSON.parse('"value'), 'value')
expect(JSON.parse('"\\utest"'), 'test')
expect(JSON.parse('"\\ud83d\\ude02"'), 'ðŸ˜‚')
expect(JSON.parse('"va\\u00f8ue"'), 'vaÃ¸ue')
expect(JSON.parse('"va\\nlu\\te"'), 'va\nlu\te')
expect(JSON.parse('[1,2,//test\n,3]'), {1,2,3})
expect(JSON.parse('[1,2,3,]'), {1,2,3})
expect(JSON.parse('[  ]'), {})
expect(JSON.parse(' [ 1,\t2\n,\r3 ] '), {1,2,3})
expect(JSON.parse('{"a":5,"b":6}'), {a=5, b=6})
expect(JSON.parse('{"a":5,"b":6,}'), {a=5, b=6})
expect(JSON.parse('//comment\n{"a":5,"b":6,}'), {a=5, b=6})
expect(JSON.parse('/*comment*/{"a":5,"b":6,}'), {a=5, b=6})
expect(JSON.parse(' {\t"a"\n: 5, "b " : 6 }'), {a=5, ['b ']=6})
expect(JSON.parse('{"a"//test\n:5,,"b":16}'), {a=5, b=16})
expect(JSON.parse('{"a"://test\n5,,"b":26}'), {a=5, b=26})
expect(JSON.parse('{,, "a" : 5,, "b":6, }'), {a=5, b=6})
expect(JSON.parse('{,, "a"  5 "b":6, }'), {a=5, b=6})
expect(JSON.parse('{,, true : 5,, "b":106, }'), {['true']=5, b=106})
expect(JSON.parse('{,, true//test\n : 5,, "b":116, }'), {['true']=5, b=116})
expect(JSON.parse('{,, a : 5,, "b":126, }'), {a=5, b=126})
expect(JSON.parse('{,, a : 5,, "b":136, } some trash'), {a=5, b=136})
expect(JSON.parse('some trash'), nil)
expect(JSON.parse('[some trash'), {})

local traffic = '{"lanes":[{"loop":null}],"areas":[124]}'
-- print(stringify(JSON.parse(traffic)))
expect(#JSON.parse(traffic).lanes, 1)
